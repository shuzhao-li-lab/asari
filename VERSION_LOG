v1.14.2 -> v1.14.3
    major new features:
        implementation of Spanning Tree Alignment of Retention Time (START)
        MS2 exporting

    bug fixes:
        use absolute paths for mzML conversion
        remove tkinter requirement
        remove basic_GUI.py, deprecated with gui.py
        limit properly enforced in gc_annotation
        multicore limit properly enforced in all multiprocessing
        re-enable dask scattering
    
    misc. code improvements
        num_files_to_check can be float for percentage, none for all, or absolute number of samples.
    

v1.14.1 -> v1.14.2
    merge into main, testing by Yuanye

v1.14.0 -> v1.14.1
    UNRELEASED
    misc. dev version

v1.13.2 -> v1.14.0
    bug fixes:
        fixed issue with hard code mz ppm in add_sample (thanks yufongpeng)
        fix bug in number of lowess iterations being different if ran from the CLI than module.
        fix bug in min_prominence threshold
        fixed issues with CLI parsing
    
    major new features:
        GC Support! enable by passing --workflow GC, please see documentation
        Automatic downloading of GC databases, currently only supports MoNA GCMS. 
        API and CLI equivalency and additional API functionality.
        Prototype of GUI, access it using `asari_gui`
        added support for dask from CLI

    new features:
        added compression support
        JSON alternative to pickle, compression compatible. 
        hardened, but still experimental, autoheight with parallelization
        unified asari ecosystem framework for parallelism replaces mp.Pool, future dask integration feasible (scheduled for v2)
        ^^^ this achieves contention-less multiprocessing by preventing shared data structures. 
        use all cores by passing `-c 0`
        mass track audit results are exported in mass track pickles
        restart option allows reuse of extracted pickles (experimental, not fully tested)
        added command to list possible workflows and clarified that mzML files must be centroided (thanks NchuYj)
        added helper function in utils for investigating peak_area and feature intensity patterns (thanks YuanyeChi)
        single file qaqc reporting either inline using --single_file_qc_reports or qc_report command
        can now modify project size via the CLI using --project_sample_number_small, determines workflow

    misc. code improvements
        added unit and integration testing for the LC-workflow
        made cmap and experiment non-optional for MassGrid construction
        removed unused database_cursor for add_sample
        made reference_id optional in bin_track_mzs
        remove database_cursor from simplesample
        remove intensity multiplier as too hacky for TOF, need a better solution. (thanks Steve Barnes for testing this with me)
        remove max_retention_shift as not useful (thanks Shuzhao-Li)
        use np.argmin in clustering for better performance O(N log N) -> O(N) (thanks Shuzhao-Li)
        additional computational improvements for mz clustering (vectorization)
        vectorize gap detection (will need to migrate this change to Asari-X too)
